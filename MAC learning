from pox.core import core
from pox.lib.packet.ethernet import ethernet from pox.lib.revent import * import pox.openflow.libopenflow_01 as of
log = core.getLogger() class LearningSwitch (EventMixin):
def __init__ (self, connection): self.connection = connection self.mac_to_port = {} self.listenTo(connection)
def _handle_PacketIn(self, event):
packet = event.parsed self.mac_to_port[packet.src] = event.port # Learn the port for the source MAC log.info("MAC %s seen on %s" % (packet.src, event.port))
# Initialize a message of type packet_out msg = of.ofp_packet_out() msg.data = event.ofp
# If the packetâ€™s destination MAC address is known, forward to the correct port if packet.dst in self.mac_to_port:
log.info("Dest MAC %s found on %s" % (packet.dst, self.mac_to_port[packet.dst])) action = of.ofp_action_output(port = self.mac_to_port[packet.dst]) msg.actions.append(action)
else:
# If the destination MAC is not known, act like a hub and forward the packet on all ports e log.info("Dest MAC %s not found, acting like hub" % packet.dst) action = of.ofp_action_output(port = of.OFPP_ALL) msg.actions.append(action)
# Send the packet
self.connection.send(msg)
def act_like_switch(self, packet, packet_in):
if packet.dst in self.mac_to_port:
# The port associated with the destination MAC of the packet is known.
port = self.mac_to_port[packet.dst] log.debug("sending packet %s to %s at port %s", packet.src, packet.dst, port) self.send_packet(packet_in.buffer_id, packet_in.data, port)
else:
# Flood the packet out everything but the input port log.debug("Flooding packet %s to %s", packet.src, packet.dst) self.send_packet(packet_in.buffer_id, packet_in.data, of.OFPP_ALL)
def send_packet (self, buffer_id, raw_data, out_port):
msg = of.ofp_packet_out() msg.buffer_id = buffer_id msg.data = raw_data action = of.ofp_action_output(port = out_port) msg.actions.append(action) self.connection.send(msg)
def launch ():
def start_switch (event):
log.debug("Controlling %s" % (event.connection,))
LearningSwitch(event.connection) core.openflow.addListenerByName("ConnectionUp", start_switch)
